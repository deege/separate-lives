name: Run Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - master

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:
  testRunner:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore Library cache
        id: restore-library-cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: Determine if Library cache was restored
        id: library-cache-restored
        run: echo "::set-output name=restored::$(if [ -d 'Library' ]; then echo 'true'; else echo 'false'; fi)"

      - name: Build and Test
        run: |
          # Your build and test commands here

      - name: Save Library cache
        if: steps.library-cache-restored.outputs.restored == 'false'
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ runner.os }}-${{ github.sha }}
      
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: SetupFiles
          path: Library

  testRunner:
    needs: setupJob
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download Setup Files
        uses: actions/download-artifact@v2
        with:
          name: SetupFiles
          path: Library

      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v2
        with:
          name: Test results (${{ matrix.testMode }})
          path: ${{ steps.testRunner.outputs.artifactsPath }}
